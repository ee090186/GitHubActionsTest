on:
  pull_request:
    types:
      - opened
      - closed
      - reopened
      - synchronize
      
jobs:
  create_text:
    runs-on: windows-latest
    timeout-minutes: 3
    steps:
      - name: checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Print branch name
        run: |
          echo ${{ github.head_ref }}
          echo ${{ github.base_ref }}
          "HEAD_BRANCH_NAME=${{ github.head_ref }}" >> $env:GITHUB_ENV
          "BASE_BRANCH_NAME=${{ github.base_ref }}" >> $env:GITHUB_ENV

      - name: git setting
        run: |
          git config --global user.name ${GITHUB_ACTOR}
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com" 

      - id: git-log
        run: |
          # The following git command will mark the boundary commit with "-", 
          # the branch to merge in with "<", and the branch to be merged with ">".
          # Example:
          # < 4679108 master commit
          # > fa69d80 test commit2
          # > f1af42e test commit
          # - 32021a0 amend

          # Selects random value for $EOF
          $git_log = git log --pretty=oneline --abbrev-commit --boundary --left-right origin/${{ env.BASE_BRANCH_NAME }}...origin/${{ env.HEAD_BRANCH_NAME }}
          -join (1..15 | ForEach {[char]((48..57)+(65..90)+(97..122) | Get-Random)}) | set EOF
          "GIT_LOG<<$EOF" >> $env:GITHUB_OUTPUT
          $git_log >> $env:GITHUB_OUTPUT
          "$EOF" >> $env:GITHUB_OUTPUT
        shell: pwsh
          
      - id: gitGraph
        run: |
          $contents = "${{ steps.git-log.outputs.GIT_LOG }}".Split("`n")
          
          # Create a gitGraph text with the commit order reversed from the "git log" command.
          [array]::Reverse($contents)


          $master_mark = "<"
          $merge_mark = ">"
          $division_point = "-"

          $code_block = '\`\`\`'
          $crlf = "`r`n"
          $master_branch = "main"
          $merge_branch = "test"
          $branch = "branch "
          $checkout = "checkout "
          $commit = "commit id:"
          $gitgraph_text = "${code_block}mermaid${crlf}"
          $gitgraph_text += "gitGraph${crlf}"

          $is_merge_branch_created = $false
          $cur_branch = $master_branch

          foreach ($line in $contents) {
              $splited_line = $line.Split(" ")
              $mark = $splited_line[0]
              $sha = $splited_line[1]

              if ($mark -eq $master_mark) {
                  if ($cur_branch -ne $master_branch) {
                      $cur_branch = $master_branch
                      $gitgraph_text += $checkout + $cur_branch + $crlf
                  }
              }
              elseif ($mark -eq $merge_mark) {
                  # Run only once on the branch to be merged
                  if (-not $is_merge_branch_created) {
                      $gitgraph_text += $branch + $merge_branch + $crlf
                      $is_merge_branch_created = $true
                  }

                  if ($cur_branch -ne $merge_branch) {
                      $cur_branch = $merge_branch
                      $gitgraph_text += $checkout + $cur_branch + $crlf
                  }
              }
              elseif ($mark -eq $division_point) {
                  if ($cur_branch -ne $master_branch) {
                      $cur_branch = $master_branch
                      $gitgraph_text += $checkout + $cur_branch + $crlf
                  }
              }

              $gitgraph_text += $commit + '"' + $sha + '"' + $crlf
          }

          $gitgraph_text += $code_block
          
          # For Debug
          Write-Output $gitgraph_text
          
          # Selects random value for $EOF
          -join (1..15 | ForEach {[char]((48..57)+(65..90)+(97..122) | Get-Random)}) | set EOF
          "text<<$EOF" >> $env:GITHUB_OUTPUT
          $gitgraph_text >> $env:GITHUB_OUTPUT
          "$EOF" >> $env:GITHUB_OUTPUT

      - name: logging gitGraph text
        run: |
          echo '${{ steps.gitGraph.outputs.text }}'

      - name: Comment on new issue
        uses: actions/github-script@v6
        with:
          script: |
              const body = `${{ steps.gitGraph.outputs.text }}`
              github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
              })
